package com.leidos.glidepath.asd;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

import com.leidos.glidepath.appcommon.DataElementHolder;
import com.leidos.glidepath.appcommon.DataElementKey;
import com.leidos.glidepath.appcommon.utils.GlidepathApplicationContext;
import com.leidos.glidepath.appcommon.utils.UnpackUtils;
import com.leidos.glidepath.asd.spat.SpatMessage;
import com.leidos.glidepath.dvi.AppConfig;
import com.leidos.glidepath.logger.ILogger;
import com.leidos.glidepath.logger.Logger;
import com.leidos.glidepath.logger.LoggerManager;
import javassist.bytecode.ByteArray;
import org.joda.time.DateTime;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.Arrays;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = AppConfig.class)
public class SpatParserTester {

    @Autowired
    ApplicationContext applicationContext;

    private static final byte[] SPAT1_PACKET =
            {
                    0x00, (byte) 0xac, 0x00, 0x03, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xe0, (byte) 0xbf, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x00, 0x1d, 0x01,
                    0x02, 0x01, 0x03, 0x03, 0x02, 0x01, 0x33, (byte) 0xf5, 0x22, (byte) 0xfa, (byte) 0x83, 0x17, 0x3d, (byte) 0x89, 0x01, 0x00,
                    0x01, 0x03, (byte) 0xbf, (byte) 0xe0, 0x00, 0x04, 0x1c, 0x35, (byte) 0xf8, (byte) 0xde, 0x13, (byte) 0xd7, (byte) 0xa3, 0x5e, 0x00, 0x00,
                    0x00, 0x01, 0x02, (byte) 0xfd, 0x2c, 0x49, (byte) 0xc3, (byte) 0xa1, (byte) 0xf9, 0x1b, 0x01, (byte) 0x89, (byte) 0xf8, (byte) 0xc2, 0x15, (byte) 0xb5,
                    (byte) 0xf7, (byte) 0xe4, 0x48, 0x58, (byte) 0xf9, (byte) 0xca, 0x18, 0x5a, 0x03, 0x6e, (byte) 0x96, 0x1f, 0x0c, (byte) 0xd5, 0x03, (byte) 0xd1,
                    (byte) 0xba, (byte) 0xcd, 0x02, 0x06, (byte) 0xbf, (byte) 0xe0, (byte) 0x80, (byte) 0x83, (byte) 0x8d,0x4e, 0x00, 0x58, 0x01, 0x04, 0x00, 0x00,
                    0x07, 0x6d, 0x02, 0x01, (byte) 0x80, 0x03, 0x05, 0x54, (byte) 0xb8, (byte) 0xe9, 0x4e, 0x03, 0x04, 0x05, 0x04, 0x01,
                    0x0b, 0x01, 0x0d, 0x06, 0x01, 0x0c, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1, 0x04, 0x05,
                    0x04, 0x02, 0x0b, 0x02, 0x0e, 0x06, 0x01, (byte) 0xc0, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1,
                    0x04, 0x05, 0x04, 0x04, 0x0b, 0x04, 0x0d, 0x06, 0x01, 0x0c, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02,
                    0x04, (byte) 0xb1, 0x04, 0x05, 0x04, 0x07, 0x0c, 0x07, 0x0f, 0x06, 0x00, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08,
                    0x02, 0x04, (byte) 0xb1, (byte) 0xff, 0x22, (byte) 0xe3, 0x04, 0x02, 0x0c, 0x02, 0x0f, 0x06, 0x01, (byte) 0xc0, 0x07, 0x02,
                    0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1, 0x04, 0x05, 0x04, 0x04, 0x0c, 0x04, 0x0f, 0x06, 0x01, 0x0c,
                    0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1, (byte) 0xff, (byte) 0x89, 0x24, 0x00, 0x01, 0x3c, (byte) 0xf7, 0x1a,
                    0x14, (byte) 0xe1, 0x1f, 0x00, 0x01, 0x00, 0x01, 0x3c, (byte) 0xf7, 0x1a, 0x24, 0x23, 0x03, (byte) 0x91, 0x00, 0x1e,
                    (byte) 0xf0, 0x42, 0x61, 0x63, 0x34, 0x6c, 0x5b, (byte) 0xb6, (byte) 0xc1, 0x6a, (byte) 0xdc, (byte) 0xca, 0x67, 0x41, 0x12, 0x28,
                    (byte) 0xe1, 0x2c, 0x07, 0x55, 0x34, 0x56, (byte) 0xfb, (byte) 0x9d, (byte) 0xfc, 0x5a, 0x21, 0x7b, 0x41, (byte) 0xc9, 0x38, 0x46,
                    0x61, 0x68, 0x6a, 0x74, (byte) 0xc4, 0x59, (byte) 0xd4, (byte) 0xdf, 0x2e, 0x71, (byte) 0x86, (byte) 0xdd, (byte) 0xf1, (byte) 0xfd, 0x03, (byte) 0xbb,
                    0x5c, (byte) 0xca, (byte) 0x8d,(byte) 0xfa, (byte) 0xcc, 0x25, (byte) 0x87 ,0x28, 0x7e, (byte) 0xe5, (byte) 0x93, (byte) 0xf0, (byte) 0x94, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x26, (byte) 0xad, 0x01, (byte) 0xe4, 0x01, 0x38
            };

    private static final byte[] SPAT2_PACKET =
            {
                    0x00, (byte) 0xac, 0x00, 0x03, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xe0, (byte) 0xbf, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x00, 0x1d, 0x01,
                    0x02, 0x01, 0x03, 0x03, 0x02, 0x01, 0x33, (byte) 0xf5, 0x22, (byte) 0xfa, (byte) 0x83, 0x17, 0x3d, (byte) 0x89, 0x01, 0x00,
                    0x01, 0x03, (byte) 0xbf, (byte) 0xe0, 0x00, 0x04, 0x1c, 0x35, (byte) 0xf8, (byte) 0xde, 0x13, (byte) 0xd7, (byte) 0xa3, 0x5e, 0x00, 0x00,
                    0x00, 0x01, 0x02, (byte) 0xfd, 0x2c, 0x49, (byte) 0xc3, (byte) 0xa1, (byte) 0xf9, 0x1b, 0x01, (byte) 0x89, (byte) 0xf8, (byte) 0xc2, 0x15, (byte) 0xb5,
                    (byte) 0xf7, (byte) 0xe4, 0x48, 0x58, (byte) 0xf9, (byte) 0xca, 0x18, 0x5a, 0x03, 0x6e, (byte) 0x96, 0x1f, 0x0c, (byte) 0xd5, 0x03, (byte) 0xd1,
                    (byte) 0xba, (byte) 0xcd, 0x02, 0x06, (byte) 0xbf, (byte) 0xe0, (byte) 0x80, (byte) 0x83, (byte) 0x8d ,0x4f, 0x00, 0x58, 0x01, 0x04, 0x00, 0x00,
                    0x07, 0x6d, 0x02, 0x01, (byte) 0x80, 0x03, 0x05, 0x54, (byte) 0xb8, (byte) 0xe9, 0x4e, 0x04, 0x04, 0x05, 0x04, 0x01,
                    0x0b, 0x01, 0x0d, 0x06, 0x01, 0x0c, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1, 0x04, 0x05,
                    0x04, 0x02, 0x0b, 0x02, 0x0e, 0x06, 0x01, (byte) 0xc0, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1,
                    0x04, 0x05, 0x04, 0x04, 0x0b, 0x04, 0x0d, 0x06, 0x01, 0x0c, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02,
                    0x04, (byte) 0xb1, 0x04, 0x05, 0x04, 0x07, 0x0c, 0x07, 0x0f, 0x06, 0x00, 0x07, 0x02, 0x04, (byte) 0xb1, 0x08,
                    0x02, 0x04, (byte) 0xb1, (byte) 0xff, (byte) 0xa5, (byte) 0xda, 0x04, 0x02, 0x0c, 0x02, 0x0f, 0x06, 0x01, (byte) 0xc0, 0x07, 0x02,
                    0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1, 0x04, 0x05, 0x04, 0x04, 0x0c, 0x04, 0x0f, 0x06, 0x01, 0x0c,
                    0x07, 0x02, 0x04, (byte) 0xb1, 0x08, 0x02, 0x04, (byte) 0xb1, (byte) 0xff, (byte) 0x89, 0x24, 0x00, 0x01, 0x3c, (byte) 0xf7, 0x1a,
                    0x16, 0x38, (byte) 0xf6, 0x00, 0x01, 0x00, 0x01, 0x3c, (byte) 0xf7, 0x1a, 0x25, 0x7b, 0x02, (byte) 0x84, (byte) 0x95, (byte) 0xa3,
                    0x6d, (byte) 0xcb, 0x60, 0x3e, 0x01, (byte) 0xad, (byte) 0x86, (byte) 0xd8, (byte) 0xf1, (byte) 0xae, 0x0a, (byte) 0xc2, 0x62, (byte) 0x83, 0x5f, (byte) 0xb3,
                    (byte) 0xe1, (byte) 0xfc, 0x6d, 0x1e, (byte) 0x96, 0x6e, 0x57, (byte) 0x8f, (byte) 0xfd, (byte) 0x84, (byte) 0x81, (byte) 0xb5, 0x0b, (byte) 0xf4, (byte) 0xbe, (byte) 0xf5,
                    (byte) 0xa1, 0x1b, 0x6b, (byte) 0x80, (byte) 0xe4, 0x08, (byte) 0xef, 0x27, (byte) 0xb2, 0x42, 0x2d, (byte) 0xf6, 0x11, (byte) 0xdd, 0x37, (byte) 0xf7,
                    0x45, 0x30, 0x62, 0x51, 0x7d, (byte) 0xde, 0x58, 0x33, (byte) 0x8b, (byte) 0xc0, 0x4a, (byte) 0xa2, 0x6b, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x26, (byte) 0xad, 0x01, (byte) 0xe4, 0x01, 0x37
            };


    private static final byte[] SPAT1 =
            {
                    (byte) 0x8d,                                               // spad ID
                    0x4e,                                                      // content version
                    0x00, 0x58,                                                // payload size
                    0x01, 0x04, 0x00, 0x00, 0x07, 0x6d,                        // Intersection 0x076D
                    0x02, 0x01, (byte) 0x80,                                   // Intersection status X0 manual control is enabled
                    0x03, 0x05, 0x54, (byte) 0xb8, (byte) 0xe9, 0x4e, 0x03,    // Message Timestamp 03 05 4E BA F6 B5 02 – Wed Nov 9 16:55:01.2 EST 2011; 1320875701.2
                    0x04,                                                      // Beginning of movement description
                    0x05, 0x04, 0x01, 0x0b, 0x01, 0x0d,                        // Straight Lane 11, Straight Lane 13
                    // how to distinguish pedestrian or special lanes?
                    0x06, 0x01, 0x0c,                                          // Green, straight + right arrow
                    0x07, 0x02, 0x04, (byte) 0xb1,                             // min time remaining X/10 secs = 1201 > 2 minutes
                    0x08, 0x02, 0x04, (byte) 0xb1,                             // max time remaining > 2 minutes
                    0x04,                                                      // ** beginning of new movement
                    0x05, 0x04, 0x02, 0x0b, 0x02, 0x0e,                        // Left turn, lane 11, Left turn lane 14
                    0x06, 0x01, (byte) 0xc0,                                   //
                    0x07, 0x02, 0x04, (byte) 0xb1,                             // min time remaining X/10 secs = 1201 > 2 minutes
                    0x08, 0x02, 0x04, (byte) 0xb1,                             // max time remaining > 2 minutes
                    0x04,                                                      // ** beginning of new movement
                    0x05, 0x04, 0x04, 0x0b, 0x04, 0x0d,                        // Right turn lane 11, Right turn Lane 13
                    0x06, 0x01, 0x0c,                                          // Green, straight + right arrow
                    0x07, 0x02, 0x04, (byte) 0xb1,                             // min
                    0x08, 0x02, 0x04, (byte) 0xb1,                             // max
                    0x04,                                                      // ** new movement
                    0x05, 0x04, 0x07, 0x0c, 0x07, 0x0f,                        // Straight/left/right lane 12, Straight/left/right lane 16
                    0x06, 0x00,                                                // State...none?
                    0x07, 0x02, 0x04, (byte) 0xb1,                             // min
                    0x08, 0x02, 0x04, (byte) 0xb1,                             // max
                    (byte) 0xff                                                // eob
            };


    private static final byte[] SPAT2 =
            {
                    (byte) 0x8d,
                    0x4f,
                    0x00, 0x58,
                    0x01, 0x04, 0x00, 0x00, 0x07, 0x6d,
                    0x02, 0x01, (byte) 0x80,
                    0x03, 0x05, 0x54, (byte) 0xb8, (byte) 0xe9, 0x4e, 0x04,
                    0x04,
                    0x05, 0x04, 0x01, 0x0b, 0x01, 0x0d,
                    0x06, 0x01, 0x0c,
                    0x07, 0x02, 0x04, (byte) 0xb1,
                    0x08, 0x02, 0x04, (byte) 0xb1,
                    0x04,
                    0x05, 0x04, 0x02, 0x0b, 0x02, 0x0e,
                    0x06, 0x01, (byte) 0xc0,
                    0x07, 0x02, 0x04, (byte) 0xb1,
                    0x08, 0x02, 0x04, (byte) 0xb1,
                    0x04,
                    0x05, 0x04, 0x04, 0x0b, 0x04, 0x0d,
                    0x06, 0x01, 0x0c,
                    0x07, 0x02, 0x04, (byte) 0xb1,
                    0x08, 0x02, 0x04, (byte) 0xb1,
                    0x04,
                    0x05, 0x04, 0x07, 0x0c, 0x07, 0x0f,
                    0x06, 0x00,
                    0x07, 0x02, 0x04, (byte) 0xb1,
                    0x08, 0x02, 0x04, (byte) 0xb1,
                    (byte) 0xff
            };


    private static final byte[] SPAT_FAILED_LIVE =
            {
                    (byte) 0x8d,
                    (byte) 0x9d,
                    0x00, 0x4c,
                    0x01, 0x04, 0x00, 0x00, 0x07, 0x6d,
                    0x02, 0x01, 0x00,
                    0x03, 0x05, 0x54, (byte) 0xc2, 0x59, 0x3e, 0x03,
                    0x04,
                    0x05, 0x04, 0x07, 0x0b, 0x02, 0x0e,
                    0x06, 0x01, 0x04,
                    0x07, 0x02, 0x00, 0x41,
                    0x08, 0x02, 0x00, (byte) 0x92,
                    0x04,
                    0x05, 0x04, 0x07, 0x0c, 0x07, 0x0f,
                    0x06, 0x01, 0x01,
                    0x07, 0x02, 0x00, 0x19,
                    0x08, 0x02, 0x00, 0x6a,
                    0x09, 0x01, 0x02,
                    0x0a, 0x02, 0x00, 0x1e,
                    0x04,
                    0x05, 0x02, 0x05, 0x0d,
                    0x06, 0x01, 0x04,
                    0x07, 0x02, 0x00, (byte) 0x9b,
                    0x08, 0x02, 0x01, (byte) 0xe6,
                    (byte) 0xff
            } ;

    ILogger logger = LoggerManager.getLogger(SpatParserTester.class);

    @Before
    public void startup() {

        GlidepathApplicationContext context = GlidepathApplicationContext.getInstance();
        context.setApplicationContext(applicationContext);

        LoggerManager.setRecordData(true);
        LoggerManager.setOutputFile("logs/SpatParserTester.log");
        LoggerManager.setRealTimeOutput(true);

        try {
            Thread.sleep(3); //force better sequencing of logs
        } catch (InterruptedException e) {
            //do nothing
        }
    }

    @After
    public void shutdown() {
        try {
            LoggerManager.writeToDisk();
        }catch (Exception e) {
            //do nothing for now
        }
    }


    @Test
    // This live message was in 'non flashing' mode and contained optional objects 09, 0a that weren't anticipated
    // from earlier testing
    public void testLivePacketThatFailed()   {
        byte[] data = SPAT_FAILED_LIVE;

        SpatMessage spat = new SpatMessage();
        spat.parse(data);

        spat.dumpSpatMessage();

        DataElementHolder holder = spat.getSpatForLane(12);

        // phase is green...10.6.....so third phase should be 10.6 + yellowCycle
        double thirdPhase = holder.getDoubleElement(DataElementKey.SIGNAL_TIME_TO_NEXT_PHASE) + GlidepathApplicationContext.getInstance().getAppConfig().getIntValue("spat.yellow");
        assertTrue(thirdPhase == holder.getDoubleElement(DataElementKey.SIGNAL_TIME_TO_THIRD_PHASE));

        DataElementHolder holderLane11 = spat.getSpatForLane(11);

        // phase is red...14.6.....so third phase should be 14.6 + greenCycle
        thirdPhase = holderLane11.getDoubleElement(DataElementKey.SIGNAL_TIME_TO_NEXT_PHASE) + GlidepathApplicationContext.getInstance().getAppConfig().getIntValue("spat.green");
        assertTrue(thirdPhase == holderLane11.getDoubleElement(DataElementKey.SIGNAL_TIME_TO_THIRD_PHASE));

    }


    @Test
    public void testSpatLength()   {
        byte[] data = SPAT1;

        int length = data.length;
        int payloadLength = ByteArray.readS16bit(data, 2);

        byte eob = data[2 + payloadLength + 1];

        assertTrue(eob == (byte) 0xff);

        System.out.println("Length is : " + length);
    }

    @Test
    public void testCurrentState()   {
        int data = 0x01;

        String result = getPhase(data);

        System.out.println("Result: " + result);

        data = 0x0104;
        result = getPhase(data);
        System.out.println("Result: " + result);


        data = 0x01;
        result = getPhase(data);
        System.out.println("Result: " + result);


        data = 0x04000000;
        result = getPhase(data);
        System.out.println("Result: " + result);


        data = 0x0c;
        result = getPhase(data);
        System.out.println("Result: " + result);

        data = 0xc0;
        result = getPhase(data);
        System.out.println("Result: " + result);


    }

    @Test
    public void parseSpat1Message()   {
        byte[] data = SPAT1;

        SpatMessage spat = new SpatMessage();

        try   {
            spat.parse(data);

            data = SPAT2;
            spat = new SpatMessage();
            spat.parse(data);
        }
        catch(Exception e)   {
            System.out.println("SPAT parse exception: " + e.getMessage());
        }

        return;
    }

    @Test
    public void testTimeStamp()   {
        // 03 05 4E BA F6 B5 02 – Wed Nov 9 16:55:01.2 EST 2011; 1320875701.2

        int startIndex = 0;
        byte[] objectBuf = { 0x03, 0x05, 0x4E, (byte) 0xBA, (byte) 0xF6, (byte) 0xB5, 0x02};

        byte[] baSeconds = Arrays.copyOfRange(objectBuf, startIndex + 2, startIndex + 2 + 4);

        long seconds = UnpackUtils.getInstance().unpackU32BigEndian(baSeconds);
        int tenths = objectBuf[startIndex + 6];

        DateTime timestamp = new DateTime(seconds * 1000 + tenths * 100);

        return;
    }


    private String getPhase(int i)
    {
        String phase = "";
        if ((i & 0x00000001)==0x00000001)
            phase = phase + "Solid green ball/";
        if ((i & 0x00000002)==0x00000002)
            phase = phase + "Solid yellow ball/";
        if ((i & 0x00000004)==0x00000004)
            phase = phase + "Solid red ball/";
        if ((i & 0x00000008)==0x00000008)
            phase = phase + "Solid flashing ball/";
        if ((i & 0x00000010)==0x00000010)
            phase = phase + "Green left arrow/";
        if ((i & 0x00000020)==0x00000020)
            phase = phase + "Yellow left arrow/";
        if ((i & 0x00000040)==0x00000040)
            phase = phase + "Red left arrow/";
        if ((i & 0x00000080)==0x00000080)
            phase = phase + "Flashing left arrow/";
        if ((i & 0x00000100)==0x00000100)
            phase = phase + "Green right arrow/";
        if ((i & 0x00000200)==0x00000200)
            phase = phase + "Yellow right arrow/";
        if ((i & 0x00000400)==0x00000400)
            phase = phase + "Red right arrow/";
        if ((i & 0x00000800)==0x00000800)
            phase = phase + "Flashing right arrow/";
        if ((i & 0x00001000)==0x00001000)
            phase = phase + "Green straight arrow/";
        if ((i & 0x00002000)==0x00002000)
            phase = phase + "Yellow straight arrow/";
        if ((i & 0x00004000)==0x00004000)
            phase = phase + "Red straight arrow/";
        if ((i & 0x00008000)==0x00008000)
            phase = phase + "Flashing straight arrow/";
        if ((i & 0x00010000)==0x00010000)
            phase = phase + "Green soft left arrow/";
        if ((i & 0x00020000)==0x00020000)
            phase = phase + "Yellow soft left arrow/";
        if ((i & 0x00040000)==0x00040000)
            phase = phase + "Red soft left arrow/";
        if ((i & 0x00080000)==0x00080000)
            phase = phase + "Flashing soft left arrow/";
        if ((i & 0x00100000)==0x00100000)
            phase = phase + "Green soft right arrow/";
        if ((i & 0x00200000)==0x00200000)
            phase = phase + "Yellow soft right arrow/";
        if ((i & 0x00400000)==0x00400000)
            phase = phase + "Red soft right arrow/";
        if ((i & 0x00800000)==0x00800000)
            phase = phase + "Flashing soft right arrow/";
        if ((i & 0x01000000)==0x01000000)
            phase = phase + "Green U turn arrow/";
        if ((i & 0x02000000)==0x02000000)
            phase = phase + "Yellow U turn arrow/";
        if ((i & 0x04000000)==0x04000000)
            phase = phase + "Red U turn arrow/";
        if ((i & 0x08000000)==0x08000000)
            phase = phase + "Flashing U turn arrow/";
        else
            phase = phase;
        return phase;
    }

}
